{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GiftGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GiftExpectApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","categories","type","value","onChange","target","getGifts","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GiftGridItem","className","src","alt","width","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","console","log","useFetchGifs","item","GifExpectApp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"2KA+BeA,EA5BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAevC,OAEI,mCACI,uBAAMC,SAVO,SAACC,GAClBA,EAAEC,iBACwB,KAAtBJ,EAAWK,QAGfP,GAAc,SAAAQ,GAAU,OAAKN,GAAL,mBAAoBM,QAKxC,UAEI,0CAEA,uBAAOC,KAAK,OAAOC,MAAOR,EAAYS,SAlB9B,SAACN,GACjBF,EAAcE,EAAEO,OAAOF,gB,uBCRlBG,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACkCC,UAAUH,GAD5C,+DAEDI,MAAMF,GAFL,cAEdG,EAFc,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVtB,kBAcbM,GAda,4CAAH,sDCERO,EAAe,SAAAL,GAAO,MAGNA,EAAIA,IAAnBE,GAHqB,EAGzBD,GAHyB,EAGrBC,OAAOV,EAHc,EAGdA,IAEnB,OACE,sBAAKc,UAAU,6CAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAI,QAAQC,MAAM,QACjC,4BAAIP,QCLGQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECFb,SAAAA,GAAa,IAAD,EACZb,mBAAS,CACjCoB,KAAM,GACNc,SAAS,IAH2B,mBAC/BC,EAD+B,KACxBC,EADwB,KAkBtC,OAZAC,qBAAU,WACRzB,EAASC,GAAUyB,MAAK,SAAAC,GACtBC,YAAW,WACTC,QAAQC,IAAIH,GACZH,EAAS,CACPhB,KAAMmB,EACNL,SAAS,MAEV,UAEJ,CAACrB,IAEGsB,EDb2BQ,CAAa9B,GAAjCa,EAHyB,EAG/BN,KAAcc,EAHiB,EAGjBA,QAetB,OACE,qCACE,oBAAIL,UAAU,6CAAd,SAA4DhB,IAC3DqB,GAAW,2CACZ,qBAAKL,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAAAsB,GAAI,OAGd,aAFA,CAEC,EAAD,CAAcrB,IAAKqB,GAAWA,EAAKpB,aES9BqB,EApCM,WAAO,IAAD,EAGa7C,mBAAS,CAAC,eAHvB,mBAGhBO,EAHgB,KAGJR,EAHI,KAiBvB,OACI,qCACI,6CAEA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BACKQ,EAAWe,KAAI,SAACT,GAAD,OAEZ,aADA,CACC,EAAD,CAASA,SAAUA,GAAeA,YCrBvCiC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OAGP,cAAC,EAAD,IAEEC,SAASC,eAAe,SAM5BX,M","file":"static/js/main.abc41f29.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst AddCategory = ({ setcategories }) => {\r\n\r\n    const [inputValue, setinputValue] = useState('')\r\n\r\n    const handleInput = (e) => {\r\n        setinputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        if (inputValue.trim() === '') {\r\n            return\r\n        }\r\n        setcategories(categories => [inputValue, ...categories])\r\n    }\r\n    return (\r\n\r\n        <>\r\n            <form onSubmit={handleSubmit}>\r\n\r\n                <h1>Add cate</h1>\r\n\r\n                <input type=\"text\" value={inputValue} onChange={handleInput} />\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddCategory;\r\n\r\nAddCategory.propTypes = {\r\n    setcategories: PropTypes.func.isRequired,\r\n    // saludo: PropTypes.number.isRequired,\r\n}","export const getGifts = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=z66SRuzLOC0dpUSjxtKu3W6w6E3C6WKz`\r\n    const resp = await fetch(url)\r\n\r\n    const { data } = await resp.json()\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    // console.log(gifs);\r\n    return gifs\r\n}","import React from 'react'\r\n\r\nexport const GiftGridItem = img => {\r\n  // console.log(img);\r\n\r\n  const { id, title, url } = img.img\r\n  // console.log(title, url, id);\r\n  return (\r\n    <div className='card animate__animated animate__fadeInDown'>\r\n      <img src={url} alt='title' width='100' />\r\n      <p>{title}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { getGifts } from '../helpers/getGifs'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GiftGridItem } from './GiftGridItem'\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  // const [images, setimages] = useState([])\r\n\r\n  const { data: images, loading } = useFetchGifs(category)\r\n  // console.log(state);\r\n\r\n  // useEffect(() => {\r\n\r\n  //     const getGifsHelper = async () => {\r\n  //         let gifs = await getGifts(category)\r\n  //         console.log(gifs);\r\n  //         setimages(gifs)\r\n\r\n  //     }\r\n  //     getGifsHelper()\r\n  // }, [category])\r\n\r\n  // getGifts()\r\n  return (\r\n    <>\r\n      <h3 className='card animate__animated animate__fadeInDown'>{category}</h3>\r\n      {loading && <p>Loading...</p>}\r\n      <div className='card-grid'>\r\n        {images.map(item => (\r\n          // <li key={item.id}>{item.title}</li>\r\n\r\n          <GiftGridItem img={item} key={item.id} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { getGifts } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = category => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true\r\n  })\r\n\r\n  useEffect(() => {\r\n    getGifts(category).then(imgs => {\r\n      setTimeout(() => {\r\n        console.log(imgs)\r\n        setstate({\r\n          data: imgs,\r\n          loading: false\r\n        })\r\n      }, 2000)\r\n    })\r\n  }, [category])\r\n\r\n  return state\r\n}\r\n","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpectApp = () => {\r\n\r\n\r\n    const [categories, setcategories] = useState(['Kardashian'])\r\n\r\n\r\n    // const handleAdd = () => {\r\n    //     // categories.push('Henry')\r\n    //     // console.log(categories);\r\n    //     // variante 1\r\n    //     // setcategories(categories.concat('Henry'))\r\n    //     // variante 2\r\n    //     // setcategories([...categories, 'Futbol'])\r\n    //     // setcategories(['Futbol', ...categories])\r\n    //     // variante3\r\n    //     setcategories((categories)=>['Futbol', ...categories])\r\n    // }\r\n    return (\r\n        <>\r\n            <h1>Gift Expect</h1>\r\n\r\n            <AddCategory setcategories={setcategories} />\r\n            <hr />\r\n\r\n            {/* <button >Agregar</button> */}\r\n\r\n            <ul>\r\n                {categories.map((category) => (\r\n                    // <li key={category}>{`${category}`}</li>\r\n                    <GifGrid category={category} key={category}/>\r\n                ))}\r\n            </ul>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default GifExpectApp;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GifExpectApp from './GiftExpectApp';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  // <App />\r\n  <GifExpectApp />\r\n  // </React.StrictMode>\r\n  , document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}